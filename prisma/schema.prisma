// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Coach{
  id        String   @id @default(uuid()) 
  email     String   @unique
  name      String
  stripeId  String   @unique
  certification Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  subscriptionPlans SubscriptionPlan[]
  workouts  Workout[]
  // cannot be null must be set on app level
  account   Account?
}

model Client {
  id        String   @id @default(uuid()) 
  email     String   @unique
  name      String
  customerId String   @unique// Stripe customer ID
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  subscription Subscription[]
  Workout Workout[]
  // cannot be null must be set on app level
  account Account?
}

model Account{
  id       String   @id @default(uuid())
  // only one of clientId or coachId should be set
  clientId    String?  @unique
  coachId     String? @unique
  // at least one of these should be set
  googleId   String? @unique
  facebookId String? @unique
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  coach   Coach? @relation(fields: [coachId], references: [id])
  client   Client? @relation(fields: [clientId], references: [id])
  
}

model SubscriptionPlan {
  id        String   @id @default(uuid())
  title     String
  description String
  price     Float
  period    PERIOD
  coachId   String
  productId String  @unique // Stripe product ID
  priceId   String  @unique// Stripe price ID
  subscriptions Subscription[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  coach     Coach   @relation(fields: [coachId], references: [id])
}

model Subscription {
  id               String   @id @default(uuid())
  clientId         String
  coachId          String
  subscriptionPlanId String
  startDate        DateTime @default(now())
  endDate          DateTime
  paymentId        String   // Stripe payment ID
  updatedAt        DateTime @updatedAt
  client           Client   @relation(fields: [clientId], references: [id])
  subscriptionPlan SubscriptionPlan @relation(fields: [subscriptionPlanId], references: [id])
  workouts         Workout[]
}
model Workout {
  id        String   @id @default(uuid())
  title     String
  description String?
  duration  Int // Duration in minutes
  coachId   String
  clientId  String
  subscriptionId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  coach     Coach   @relation(fields: [coachId], references: [id])
  client    Client  @relation(fields: [clientId], references: [id])
  subscription Subscription @relation(fields: [subscriptionId], references: [id])
  
}

enum ROLE {
  CLIENT
  COACH
}

enum PROVIDER {
  CREDENTIALS
  GOOGLE
  FACEBOOK
}

enum PERIOD {
  MONTHLY
  YEARLY
}
