// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Account{
  id       String   @id @default(uuid())
  email     String   @unique
  role      ROLE
  // only one of clientId or coachId should be set
  clientId    String?  @unique
  coachId     String? @unique
  // at least one of these should be set
  googleId   String? @unique
  discordId String? @unique
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  coach   Coach? @relation(fields: [coachId], references: [id])
  client   Client? @relation(fields: [clientId], references: [id])
  senderMessages Message[] @relation("Sender")
  receiverMessages Message[] @relation("Receiver")
  
}
model Coach{
  id        String   @id @default(uuid()) 
  name      String
  stripeId  String?   @unique
  certification Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  subscriptionPlans SubscriptionPlan[]
  workouts  Workout[]
  // cannot be null must be set on app level
  account   Account?
}

model Client {
  id        String   @id @default(uuid()) 
  name      String
  customerId String?   @unique// Stripe customer ID
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  subscription Subscription[]
  Workout Workout[]
  // cannot be null must be set on app level
  account Account?
}

model SubscriptionPlan {
  id        String   @id @default(uuid())
  title     String
  description String
  price     Float
  period    PERIOD
  coachId   String
  productId String  @unique // Stripe product ID
  priceId   String  @unique// Stripe price ID
  subscriptions Subscription[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  coach     Coach   @relation(fields: [coachId], references: [id])
}

model Subscription {
  id               String   @id @default(uuid())
  clientId         String
  coachId          String
  subscriptionPlanId String
  startDate        DateTime @default(now())
  endDate          DateTime
  paymentId        String   // Stripe payment ID
  updatedAt        DateTime @updatedAt
  client           Client   @relation(fields: [clientId], references: [id])
  subscriptionPlan SubscriptionPlan @relation(fields: [subscriptionPlanId], references: [id])
  workouts         Workout[]
}
model Workout {
  id        String   @id @default(uuid())
  title     String
  description String?
  duration  Int // Duration in minutes
  coachId   String
  clientId  String
  subscriptionId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  coach     Coach   @relation(fields: [coachId], references: [id])
  client    Client  @relation(fields: [clientId], references: [id])
  subscription Subscription @relation(fields: [subscriptionId], references: [id])
  exercises Exercise[] 
  
}
model Exercise {
  id        String   @id @default(uuid())
  workoutId String
  name      String
  sets      Int
  reps      Int
  weight    Float?
  type      String
  muscle    String
  equipment String
  instructions String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  workouts  Workout @relation( fields: [workoutId], references: [id])
}
model ExerciseTemplate {
  id        String   @id @default(uuid())
  name      String
  type      String
  muscle    String
  equipment String
  instructions String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id       String   @id @default(uuid())
  content   String
  senderId  String
  receiverId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sender    Account @relation("Sender", fields: [senderId], references: [id])
  receiver  Account @relation("Receiver", fields: [receiverId], references: [id])
}

enum ROLE {
  client 
  coach
}

enum PERIOD {
  monthly
  yearly
}
